{
  "#": {
    "prefix": "#",
    "body": "# => ",
    "description": "DEPRECATED: Add ‘# =>’ Marker",
    "scope": "source.ruby"
  },
  ":": {
    "prefix": ":",
    "body": ":${1:key} => ${2:\"${3:value}\"}${4:, }",
    "description": "DEPRECATED: Hash Pair — :key => \"value\"",
    "scope": "source.ruby"
  },
  "Comp": {
    "prefix": "Comp",
    "body": "include Comparable\n\ndef <=>(other)\n\t$0\nend",
    "description": "DEPRECATED: include Comparable ..",
    "scope": "source.ruby"
  },
  "Dir": {
    "prefix": "Dir",
    "body": "Dir[${1:\"${2:glob/**/*.rb}\"}]",
    "description": "DEPRECATED: Dir[\"..\"]",
    "scope": "source.ruby"
  },
  "Dirg": {
    "prefix": "Dirg",
    "body": "Dir.glob(${1:\"${2:dir/glob/*}\"}) { |${3:file}| $0 }",
    "description": "DEPRECATED: Dir.glob(\"..\") { |file| .. }",
    "scope": "source.ruby"
  },
  "Enum": {
    "prefix": "Enum",
    "body": "include Enumerable\n\ndef each(&block)\n\t$0\nend",
    "description": "DEPRECATED: include Enumerable ..",
    "scope": "source.ruby"
  },
  "File": {
    "prefix": "File",
    "body": "File.read(${1:\"${2:path/to/file}\"})",
    "description": "DEPRECATED: File.read(\"..\")",
    "scope": "source.ruby"
  },
  "Filef": {
    "prefix": "Filef",
    "body": "File.foreach(${1:\"${2:path/to/file}\"}) { |${3:line}| $0 }",
    "description": "DEPRECATED: File.foreach (\"..\") { |line| .. }",
    "scope": "source.ruby"
  },
  "Forw": {
    "prefix": "Forw",
    "body": "extend Forwardable",
    "description": "DEPRECATED: extend Forwardable",
    "scope": "source.ruby"
  },
  "Hash": {
    "prefix": "Hash",
    "body": "Hash.new { |${1:hash}, ${2:key}| ${1:hash}[${2:key}] = $0 }",
    "description": "DEPRECATED: Hash.new { |hash, key| hash[key] = .. }",
    "scope": "source.ruby"
  },
  "Md": {
    "prefix": "Md",
    "body": "File.open(${1:\"${2:path/to/file}.dump\"}, \"wb\") { |${3:file}| Marshal.dump(${4:obj}, ${3:file}) }",
    "description": "DEPRECATED: Marshal.dump(.., file)",
    "scope": "source.ruby"
  },
  "Ml": {
    "prefix": "Ml",
    "body": "File.open(${1:\"${2:path/to/file}.dump\"}, \"rb\") { |${3:file}| Marshal.load(${3:file}) }",
    "description": "DEPRECATED: Marshal.load(obj)",
    "scope": "source.ruby"
  },
  "Pn-": {
    "prefix": "Pn-",
    "body": "PStore.new(${1:\"${2:file_name.pstore}\"})",
    "description": "DEPRECATED: PStore.new( .. )",
    "scope": "source.ruby"
  },
  "Yd-": {
    "prefix": "Yd-",
    "body": "File.open(${1:\"${2:path/to/file}.yaml\"}, \"w\") { |${3:file}| YAML.dump(${4:obj}, ${3:file}) }",
    "description": "DEPRECATED: YAML.dump(.., file)",
    "scope": "source.ruby"
  },
  "Yl-": {
    "prefix": "Yl-",
    "body": "File.open(${1:\"${2:path/to/file}.yaml\"}) { |${3:file}| YAML.load(${3:file}) }",
    "description": "DEPRECATED: YAML.load(file)",
    "scope": "source.ruby"
  },
  "all": {
    "prefix": "all",
    "body": "all? { |${1:e}| $0 }",
    "description": "DEPRECATED: all? { |e| .. }",
    "scope": "source.ruby"
  },
  "am": {
    "prefix": "am",
    "body": "alias_method :${1:new_name}, :${0:old_name}",
    "description": "DEPRECATED: alias_method ..",
    "scope": "source.ruby"
  },
  "any": {
    "prefix": "any",
    "body": "any? { |${1:e}| $0 }",
    "description": "DEPRECATED: any? { |e| .. }",
    "scope": "source.ruby"
  },
  "app": {
    "prefix": "app",
    "body": "if __FILE__ == \\$PROGRAM_NAME\n\t$0\nend",
    "description": "DEPRECATED: application { .. }",
    "scope": "source.ruby"
  },
  "arr": {
    "prefix": "arr",
    "body": "Array.new(${1:len,val})\n$0",
    "description": "DEPRECATED: Arry.new(...)",
    "scope": "source.ruby"
  },
  "arri": {
    "prefix": "arri",
    "body": "Array.new(${1:len}) { |${2:i}| $0 }",
    "description": "DEPRECATED: Array.new( .. ) { |index| .. }",
    "scope": "source.ruby"
  },
  "asnr": {
    "prefix": "asnr",
    "body": "assert_nothing_raised(${1:Exception}) { $0 }",
    "description": "DEPRECATED: assert_nothing_raised(..) { .. }",
    "scope": "source.ruby"
  },
  "asnt": {
    "prefix": "asnt",
    "body": "assert_nothing_thrown { $0 }",
    "description": "DEPRECATED: assert_nothing_thrown { .. }",
    "scope": "source.ruby"
  },
  "asr": {
    "prefix": "asr",
    "body": "assert_raise(${1:Exception}) { $0 }",
    "description": "DEPRECATED: assert_raise(..) { .. }",
    "scope": "source.ruby"
  },
  "ast": {
    "prefix": "ast",
    "body": "assert_throws(:${1:expected}) { $0 }",
    "description": "DEPRECATED: assert_throws(..) { .. }",
    "scope": "source.ruby"
  },
  "beg": {
    "prefix": "beg",
    "body": "begin\n\t$1\nrescue ${2:ExceptionName}\n\t$3\nend",
    "description": "DEPRECATED: begin … rescue … end",
    "scope": "source.ruby"
  },
  "bm-": {
    "prefix": "bm-",
    "body": "TESTS = ${1:10_000}\nBenchmark.bmbm do |results|\n  $0\nend",
    "description": "DEPRECATED: Benchmark.bmbm do .. end",
    "scope": "source.ruby"
  },
  "case": {
    "prefix": "case",
    "body": "case ${1:object}\nwhen ${2:condition}\n\t$0\nend",
    "description": "DEPRECATED: case … end",
    "scope": "source.ruby"
  },
  "cl": {
    "prefix": "cl",
    "body": "classify { |${1:e}| $0 }",
    "description": "DEPRECATED: classify { |e| .. }",
    "scope": "source.ruby"
  },
  "cla": {
    "prefix": "cla",
    "body": "class ${1:ClassName}\n\t$0\nend",
    "description": "DEPRECATED: class .. end",
    "scope": "source.ruby"
  },
  "clase": {
    "prefix": "clase",
    "body": "class << ${1:self}\n\t$0\nend",
    "description": "DEPRECATED: class << self .. end",
    "scope": "source.ruby"
  },
  "clafn": {
    "prefix": "clafn",
    "body": "split(\"::\").inject(Object) { |par, const| par.const_get(const) }",
    "description": "DEPRECATED: class_from_name()",
    "scope": "source.ruby"
  },
  "clast": {
    "prefix": "clast",
    "body": "$1 = Struct.new(:${2:attr_names}) do\n\tdef ${3:method_name}\n\t\t$0\n\tend\n\t\n\t\nend",
    "description": "DEPRECATED: ClassName = Struct .. do .. end",
    "scope": "source.ruby"
  },
  "col": {
    "prefix": "col",
    "body": "collect { |${1:e}| $0 }",
    "description": "DEPRECATED: collect { |e| .. }",
    "scope": "source.ruby"
  },
  "deec": {
    "prefix": "deec",
    "body": "Marshal.load(Marshal.dump(${0:obj_to_copy}))",
    "description": "DEPRECATED: deep_copy(..)",
    "scope": "source.ruby"
  },
  "def": {
    "prefix": "def",
    "body": "def ${1:method_name}\n\t$0\nend",
    "description": "DEPRECATED: def … end",
    "scope": "source.ruby"
  },
  "defd": {
    "prefix": "defd",
    "body": "def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}",
    "description": "DEPRECATED: def_delegator ..",
    "scope": "source.ruby"
  },
  "defds": {
    "prefix": "defds",
    "body": "def_delegators :${1:@del_obj}, :${0:del_methods}",
    "description": "DEPRECATED: def_delegators ..",
    "scope": "source.ruby"
  },
  "defi": {
    "prefix": "defi",
    "body": "def initialize${1:(${2:argument})}\n\t@${2:argument} = ${2:argument}$0\nend",
    "description": "DEPRECATED: def initialize .. end",
    "scope": "source.ruby"
  },
  "defmm": {
    "prefix": "defmm",
    "body": "def method_missing(meth, *args, &blk)\n\t$0\nend",
    "description": "DEPRECATED: def method_missing .. end",
    "scope": "source.ruby"
  },
  "defs": {
    "prefix": "defs",
    "body": "def self.${1:class_method_name}\n\t$0\nend",
    "description": "DEPRECATED: def self .. end",
    "scope": "source.ruby"
  },
  "deft": {
    "prefix": "deft",
    "body": "def test_${1:case_name}\n\t$0\nend",
    "description": "DEPRECATED: def test_ .. end",
    "scope": "source.ruby"
  },
  "deli": {
    "prefix": "deli",
    "body": "delete_if { |${1:e}| $0 }",
    "description": "DEPRECATED: delete_if { |e| .. }",
    "scope": "source.ruby"
  },
  "det": {
    "prefix": "det",
    "body": "detect { |${1:e}| $0 }",
    "description": "DEPRECATED: detect { |e| .. }",
    "scope": "source.ruby"
  },
  "dir": {
    "prefix": "dir",
    "body": "File.dirname(__FILE__)",
    "description": "DEPRECATED: directory()",
    "scope": "source.ruby"
  },
  "do": {
    "prefix": "do",
    "body": "do\n\t$0\nend",
    "description": "DEPRECATED: Insert do … end",
    "scope": "source.ruby"
  },
  "dop": {
    "prefix": "dop",
    "body": "do |${1:variable}|\n\t$0\nend",
    "description": "DEPRECATED: Insert do |variable| … end",
    "scope": "source.ruby"
  },
  "ea": {
    "prefix": "ea",
    "body": "each { |${1:e}| $0 }",
    "description": "DEPRECATED: each { |e| .. }",
    "scope": "source.ruby"
  },
  "eab": {
    "prefix": "eab",
    "body": "each_byte { |${1:byte}| $0 }",
    "description": "DEPRECATED: each_byte { |byte| .. }",
    "scope": "source.ruby"
  },
  "eacha": {
    "prefix": "eac-",
    "body": "each_char { |${1:chr}| $0 }",
    "description": "DEPRECATED: each_char { |chr| .. }",
    "scope": "source.ruby"
  },
  "eacon": {
    "prefix": "eac-",
    "body": "each_cons(${1:2}) { |${2:group}| $0 }",
    "description": "DEPRECATED: each_cons(..) { |group| .. }",
    "scope": "source.ruby"
  },
  "eai": {
    "prefix": "eai",
    "body": "each_index { |${1:i}| $0 }",
    "description": "DEPRECATED: each_index { |i| .. }",
    "scope": "source.ruby"
  },
  "eak": {
    "prefix": "eak",
    "body": "each_key { |${1:key}| $0 }",
    "description": "DEPRECATED: each_key { |key| .. }",
    "scope": "source.ruby"
  },
  "eal": {
    "prefix": "eal",
    "body": "each_line$1 { |${2:line}| $0 }",
    "description": "DEPRECATED: each_line { |line| .. }",
    "scope": "source.ruby"
  },
  "eap": {
    "prefix": "eap",
    "body": "each_pair { |${1:name}, ${2:val}| $0 }",
    "description": "DEPRECATED: each_pair { |name, val| .. }",
    "scope": "source.ruby"
  },
  "eas-": {
    "prefix": "eas-",
    "body": "each_slice(${1:2}) { |${2:group}| $0 }",
    "description": "DEPRECATED: each_slice(..) { |group| .. }",
    "scope": "source.ruby"
  },
  "eav": {
    "prefix": "eav",
    "body": "each_value { |${1:val}| $0 }",
    "description": "DEPRECATED: each_value { |val| .. }",
    "scope": "source.ruby"
  },
  "eawi": {
    "prefix": "eawi",
    "body": "each_with_index { |${1:e}, ${2:i}| $0 }",
    "description": "DEPRECATED: each_with_index { |e, i| .. }",
    "scope": "source.ruby"
  },
  "elsif": {
    "prefix": "elsif",
    "body": "elsif ${1:condition}\n\t$0",
    "description": "DEPRECATED: elsif ...",
    "scope": "source.ruby"
  },
  "_e": {
    "prefix": "end",
    "body": "__END__\n",
    "description": "DEPRECATED: __END__",
    "scope": "source.ruby"
  },
  "fin": {
    "prefix": "fin",
    "body": "find { |${1:e}| $0 }",
    "description": "DEPRECATED: find { |e| .. }",
    "scope": "source.ruby"
  },
  "fina": {
    "prefix": "fina",
    "body": "find_all { |${1:e}| $0 }",
    "description": "DEPRECATED: find_all { |e| .. }",
    "scope": "source.ruby"
  },
  "flao": {
    "prefix": "flao",
    "body": "inject(Array.new) { |${1:arr}, ${2:a}| ${1:arr}.push(*${2:a}) }",
    "description": "DEPRECATED: flatten_once()",
    "scope": "source.ruby"
  },
  "gre": {
    "prefix": "gre",
    "body": "grep(${1:/${2:pattern}/}) { |${3:match}| $0 }",
    "description": "DEPRECATED: grep(/pattern/) { |match| .. }",
    "scope": "source.ruby"
  },
  "i": {
    "prefix": "i",
    "body": "inspect",
    "description": "DEPRECATED: #inspect",
    "scope": "source.ruby"
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}\n\t$0\nend",
    "description": "DEPRECATED: if … end",
    "scope": "source.ruby"
  },
  "ife": {
    "prefix": "ife",
    "body": "if ${1:condition}\n\t$2\nelse\n\t$3\nend",
    "description": "DEPRECATED: if … else … end",
    "scope": "source.ruby"
  },
  "loo": {
    "prefix": "loo",
    "body": "loop { $0 }",
    "description": "DEPRECATED: loop { .. }",
    "scope": "source.ruby"
  },
  "map": {
    "prefix": "map",
    "body": "map { |${1:e}| $0 }",
    "description": "DEPRECATED: map { |e| .. }",
    "scope": "source.ruby"
  },
  "mapwi-": {
    "prefix": "mapwi-",
    "body": "enum_with_index.map { |${1:e}, ${2:i}| $0 }",
    "description": "DEPRECATED: map_with_index { |e, i| .. }",
    "scope": "source.ruby"
  },
  "max": {
    "prefix": "max",
    "body": "max { |a, b| $0 }",
    "description": "DEPRECATED: max { |a, b| .. }",
    "scope": "source.ruby"
  },
  "min": {
    "prefix": "min",
    "body": "min { |a, b| $0 }",
    "description": "DEPRECATED: min { |a, b| .. }",
    "scope": "source.ruby"
  },
  "mod": {
    "prefix": "mod",
    "body": "module ${1:ModuleName}\n\t$0\nend",
    "description": "DEPRECATED: module .. end",
    "scope": "source.ruby"
  },
  "modf": {
    "prefix": "modf",
    "body": "module $1\n\tmodule_function\n\t\n\t$0\nend",
    "description": "DEPRECATED: module .. module_function .. end",
    "scope": "source.ruby"
  },
  "nam": {
    "prefix": "nam",
    "body": "namespace :$1 do\n\t$0\nend",
    "description": "DEPRECATED: namespace :.. do .. end",
    "scope": "source.ruby"
  },
  "par": {
    "prefix": "par",
    "body": "partition { |${1:e}| $0 }",
    "description": "DEPRECATED: partition { |e| .. }",
    "scope": "source.ruby"
  },
  "patfh": {
    "prefix": "patfh",
    "body": "File.join(File.dirname(__FILE__), *%w[${1:rel path here}])",
    "description": "DEPRECATED: path_from_here( .. )",
    "scope": "source.ruby"
  },
  "r": {
    "prefix": "r",
    "body": "attr_reader :${0:attr_names}",
    "description": "DEPRECATED: attr_reader ..",
    "scope": "source.ruby"
  },
  "ran": {
    "prefix": "ran",
    "body": "sort_by { rand }",
    "description": "DEPRECATED: randomize()",
    "scope": "source.ruby"
  },
  "rb": {
    "prefix": "rb",
    "body": "#!/usr/bin/env ruby -wKU\n",
    "description": "DEPRECATED: #!/usr/bin/env ruby -wKU",
    "scope": "source.ruby, L:dyn.caret.begin.document"
  },
  "rej": {
    "prefix": "rej",
    "body": "reject { |${1:e}| $0 }",
    "description": "DEPRECATED: reject { |e| .. }",
    "scope": "source.ruby"
  },
  "rep": {
    "prefix": "rep",
    "body": "results.report(\"${1:name}:\") { TESTS.times { $0 } }",
    "description": "DEPRECATED: results.report(..) { .. }",
    "scope": "source.ruby"
  },
  "req": {
    "prefix": "req",
    "body": "require '$0'",
    "description": "DEPRECATED: require '..'",
    "scope": "source.ruby"
  },
  "reqg-": {
    "prefix": "reqg-",
    "body": "require \"$0\"",
    "description": "DEPRECATED: require_gem \"..\"",
    "scope": "source.ruby"
  },
  "reve": {
    "prefix": "reve",
    "body": "reverse_each { |${1:e}| $0 }",
    "description": "DEPRECATED: reverse_each { |e| .. }",
    "scope": "source.ruby"
  },
  "rw": {
    "prefix": "rw",
    "body": "attr_accessor :${0:attr_names}",
    "description": "DEPRECATED: attr_accessor ..",
    "scope": "source.ruby"
  },
  "sca": {
    "prefix": "sca",
    "body": "scan(/${1:pattern}/) { |${2:match}| $0 }",
    "description": "DEPRECATED: scan(/../) { |match| .. }",
    "scope": "source.ruby"
  },
  "sel": {
    "prefix": "sel",
    "body": "select { |${1:e}| $0 }",
    "description": "DEPRECATED: select { |e| .. }",
    "scope": "source.ruby"
  },
  "sinc": {
    "prefix": "sinc",
    "body": "class << self; self end",
    "description": "DEPRECATED: singleton_class()",
    "scope": "source.ruby"
  },
  "sor": {
    "prefix": "sor",
    "body": "sort { |a, b| $0 }",
    "description": "DEPRECATED: sort { |a, b| .. }",
    "scope": "source.ruby"
  },
  "sorb": {
    "prefix": "sorb",
    "body": "sort_by { |${1:e}| $0 }",
    "description": "DEPRECATED: sort_by { |e| .. }",
    "scope": "source.ruby"
  },
  "tas": {
    "prefix": "tas",
    "body": "desc \"${1:Task description}\"\ntask :${2:${3:task_name} => ${4:[:${5:dependent, :tasks}]}} do\n\t$0\nend",
    "description": "DEPRECATED: task :task_name => [:dependent, :tasks] do .. end",
    "scope": "source.ruby"
  },
  "ts": {
    "prefix": "ts",
    "body": "require \"test/unit\"\n\nrequire \"tc_${1:test_case_file}\"\nrequire \"tc_${2:test_case_file}\"\n",
    "description": "DEPRECATED: require \"tc_..\" ..",
    "scope": "source.ruby"
  },
  "unif": {
    "prefix": "unif",
    "body": "ARGF.each_line$1 do |${2:line}|\n\t$0\nend",
    "description": "DEPRECATED: unix_filter { .. }",
    "scope": "source.ruby"
  },
  "unless": {
    "prefix": "unless",
    "body": "unless ${1:condition}\n\t$0\nend",
    "description": "DEPRECATED: unless … end",
    "scope": "source.ruby"
  },
  "until": {
    "prefix": "until",
    "body": "until ${1:condition}\n\t$0\nend",
    "description": "DEPRECATED: until ... end",
    "scope": "source.ruby"
  },
  "usai": {
    "prefix": "usai",
    "body": "if ARGV.$1\n\tabort \"Usage:  #{\\$PROGRAM_NAME} ${2:ARGS_GO_HERE}\"\nend",
    "description": "DEPRECATED: usage_if()",
    "scope": "source.ruby"
  },
  "usau": {
    "prefix": "usau",
    "body": "unless ARGV.$1\n\tabort \"Usage:  #{\\$PROGRAM_NAME} ${2:ARGS_GO_HERE}\"\nend",
    "description": "DEPRECATED: usage_unless()",
    "scope": "source.ruby"
  },
  "utf8": {
    "prefix": "utf8",
    "body": "# encoding: ${1:UTF-8}\n",
    "description": "DEPRECATED: # encoding: UTF-8",
    "scope": "source.ruby"
  },
  "w": {
    "prefix": "w",
    "body": "attr_writer :${0:attr_names}",
    "description": "DEPRECATED: attr_writer ..",
    "scope": "source.ruby"
  },
  "when": {
    "prefix": "when",
    "body": "when ${1:condition}\n\t$0",
    "description": "DEPRECATED: when …",
    "scope": "source.ruby"
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:condition}\n\t$0\nend",
    "description": "DEPRECATED: while ... end",
    "scope": "source.ruby"
  },
  "xml-": {
    "prefix": "xml-",
    "body": "REXML::Document.new(File.read(${1:\"${2:path/to/file}\"}))",
    "description": "DEPRECATED: xmlread(..)",
    "scope": "source.ruby"
  },
  "xpa": {
    "prefix": "xpa",
    "body": "elements.each(${1:\"${2://XPath}\"}) do |${3:node}|\n\t$0\nend",
    "description": "DEPRECATED: xpath(..) { .. }",
    "scope": "source.ruby"
  },
  "y": {
    "prefix": "y",
    "body": " :yields: ${0:arguments}",
    "description": "DEPRECATED: :yields:",
    "scope": "source.ruby comment"
  },
  "zip": {
    "prefix": "zip",
    "body": "zip(${1:enums}) { |${2:row}| $0 }",
    "description": "DEPRECATED: zip(enums) { |row| .. }",
    "scope": "source.ruby"
  }
}